(*
* Gramática BNF (Backus-Naur Form) 
* para o Compilador C Educacional
* 
* Notação BNF:
* - ::= significa "é definido como"
* - | indica alternativa
* - <> indica não-terminal
* - "" indica terminal (token)
*)

(* ========== PROGRAMA PRINCIPAL ========== *)
<program> ::= <declaration_list>

<declaration_list> ::= <declaration> | <declaration_list> <declaration>

<declaration> ::= <function_declaration> | <variable_declaration>

(* ========== DECLARAÇÕES ========== *)
<function_declaration> ::= <type_specifier> <identifier> "(" <parameter_list> ")" <compound_statement>
                        | <type_specifier> <identifier> "(" ")" <compound_statement>

<parameter_list> ::= <parameter_declaration> | <parameter_list> "," <parameter_declaration>

<parameter_declaration> ::= <type_specifier> <identifier>

<variable_declaration> ::= <type_specifier> <identifier> ";"
                        | <type_specifier> <identifier> "=" <expression> ";"

<type_specifier> ::= "int" | "float" | "char" | "void"

(* ========== COMANDOS ========== *)
<statement> ::= <compound_statement>
             | <expression_statement>
             | <selection_statement>
             | <iteration_statement>
             | <jump_statement>

<compound_statement> ::= "{" <statement_list> "}"
                      | "{" "}"

<statement_list> ::= <statement> | <statement_list> <statement>

<expression_statement> ::= <expression> ";" | ";"

<selection_statement> ::= "if" "(" <expression> ")" <statement>
                       | "if" "(" <expression> ")" <statement> "else" <statement>

<iteration_statement> ::= "while" "(" <expression> ")" <statement>
                       | "for" "(" <expression_statement> <expression_statement> <expression> ")" <statement>
                       | "for" "(" <expression_statement> <expression_statement> ")" <statement>

<jump_statement> ::= "return" <expression> ";"
                  | "return" ";"
                  | "break" ";"
                  | "continue" ";"

(* ========== EXPRESSÕES ========== *)
<expression> ::= <assignment_expression> | <expression> "," <assignment_expression>

<assignment_expression> ::= <logical_or_expression>
                          | <logical_or_expression> "=" <assignment_expression>

<logical_or_expression> ::= <logical_and_expression>
                         | <logical_or_expression> "||" <logical_and_expression>

<logical_and_expression> ::= <equality_expression>
                          | <logical_and_expression> "&&" <equality_expression>

<equality_expression> ::= <relational_expression>
                       | <equality_expression> "==" <relational_expression>
                       | <equality_expression> "!=" <relational_expression>

<relational_expression> ::= <additive_expression>
                         | <relational_expression> "<" <additive_expression>
                         | <relational_expression> ">" <additive_expression>
                         | <relational_expression> "<=" <additive_expression>
                         | <relational_expression> ">=" <additive_expression>

<additive_expression> ::= <multiplicative_expression>
                       | <additive_expression> "+" <multiplicative_expression>
                       | <additive_expression> "-" <multiplicative_expression>

<multiplicative_expression> ::= <unary_expression>
                             | <multiplicative_expression> "*" <unary_expression>
                             | <multiplicative_expression> "/" <unary_expression>
                             | <multiplicative_expression> "%" <unary_expression>

<unary_expression> ::= <postfix_expression>
                    | "-" <unary_expression>
                    | "!" <unary_expression>
                    | "++" <unary_expression>
                    | "--" <unary_expression>

<postfix_expression> ::= <primary_expression>
                      | <postfix_expression> "(" <argument_list> ")"
                      | <postfix_expression> "(" ")"
                      | <postfix_expression> "++"
                      | <postfix_expression> "--"

<argument_list> ::= <assignment_expression> | <argument_list> "," <assignment_expression>

<primary_expression> ::= <identifier>
                      | <constant>
                      | <string_literal>
                      | "(" <expression> ")"

(* ========== TOKENS TERMINAIS ========== *)
<identifier> ::= <letter> | <identifier> <letter> | <identifier> <digit> | <identifier> "_"

<constant> ::= <integer_constant> | <floating_constant> | <character_constant>

<integer_constant> ::= <decimal_constant> | <octal_constant> | <hexadecimal_constant>

<decimal_constant> ::= <nonzero_digit> | <decimal_constant> <digit>

<octal_constant> ::= "0" | <octal_constant> <octal_digit>

<hexadecimal_constant> ::= "0x" <hex_digit> | "0X" <hex_digit> | <hexadecimal_constant> <hex_digit>

<floating_constant> ::= <digit_sequence> "." <digit_sequence>
                     | <digit_sequence> "."
                     | "." <digit_sequence>
                     | <digit_sequence> <exponent_part>
                     | <digit_sequence> "." <digit_sequence> <exponent_part>
                     | <digit_sequence> "." <exponent_part>
                     | "." <digit_sequence> <exponent_part>

<digit_sequence> ::= <digit> | <digit_sequence> <digit>

<exponent_part> ::= "e" <sign> <digit_sequence>
                 | "E" <sign> <digit_sequence>
                 | "e" <digit_sequence>
                 | "E" <digit_sequence>

<sign> ::= "+" | "-"

<character_constant> ::= "'" <c_char> "'" | "'" <escape_sequence> "'"

<string_literal> ::= "\"" <s_char_sequence> "\""

<s_char_sequence> ::= <s_char> | <s_char_sequence> <s_char>

<escape_sequence> ::= "\'" | "\"" | "\?" | "\\" | "\a" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v"
                   | "\" <octal_digit>
                   | "\" <octal_digit> <octal_digit>
                   | "\" <octal_digit> <octal_digit> <octal_digit>
                   | "\x" <hex_digit>
                   | "\x" <hex_digit> <hex_digit>

(* ========== CARACTERES BÁSICOS ========== *)
<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" 
          | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
          | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
          | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<nonzero_digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<octal_digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"

<hex_digit> ::= <digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

<c_char> ::= (* qualquer caractere exceto aspas simples, barra invertida ou nova linha *)

<s_char> ::= (* qualquer caractere exceto aspas duplas, barra invertida ou nova linha *)
